%{
#include <stdio.h>
#include <cstdio>
#include <iostream>
#include "../semantica/funcdirectory.cpp"
#include "../semantica/cubo.cpp"
using namespace std;

// stuff from flex that bison needs to know about:
extern "C" int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;

//numeros de operadores 1  2  3  4  5  6  7  8  9  10 11 12 13
//--------------------- +  -  *  /  =  != == <  <= >  >= && ||
int contFunc = 0;
int contParam = 0;
int contVars = 0;
int scope = 0;
char* nameVar = NULL;
 
void yyerror(const char *s);

%}
%union {
	int ival;
	float fval;
	char *id;
	char *ide;
	char *sval;
}
%token <ival> CINT
%token <fval> CFLOAT
%token <ide> IDE
%token <id> ID
%token <sval> STRING
%token PROGRAMA FUNC COND SI SINO VAR IMPRIMIR MIENTRAS 
		DETENER MOVER_ADELANTE MOVER_ATRAS ROTAR 
		CARGAR_MAPA LLO LLC COO COC PAO PAC  ASIGNACION 
		IGUAL MAY MAYIG MENIG MEN NOT DIF MAS MENOS POR 
		ENTRE C PC PUNTO DP TRUE FALSE AND OR 
		CAMINO_DESPEJADO CAMINO_BLOQUEADO INTERSECCION_OBJ
		TENER_TODOS_OBJS RECOGER_OBJ TERMINAR
%%
programa: { addFunc((char*)"global", contFunc); } p1 p2 PROGRAMA 
		  { addFunc((char*)"main", ++contFunc); } LLO p1 p3 LLC;
p1: /* empty */ | var p1;
p2: /* empty */ | modulo;
p3: cuerpo p4;
p4: /* empty */ | cuerpo p4;

var: VAR ID  { contVars++; nameVar = $2; addVar(nameVar); } v1 PC;
v1: v2 | COO CINT COC;
v2: ASIGNACION v3;
v3: exp | LLO v4 LLC;
v4: CINT v5;
v5: /* empty */ | C CINT v5;

modulo: FUNC ID { if( findFunc($2) ){ addFunc($2, ++contFunc); } } 
			PAO m1 PAC LLO m2 LLC m6;
m1: /* empty */ | param;
m2: m3 m4;
m3: /* empty */ | var m3;
m4: cuerpo m5;
m5: /* empty */ | cuerpo m5;
m6: m7;
m7: /* empty */ | modulo;

param: VAR ID pa;
pa: /* empty */|C param;

cuerpo: asignacion C1 | condicion | ciclo | predef C1 | imprimir C1;
C1: PC;

asignacion: ID as ASIGNACION exp;
as: /* empty */ | COO exp COC;


logico: expresion l1;
l1: /* empty */ | AND l2 | OR l2;
l2: expresion | pruebas;

expresion: exp expr {/*Meter operador a Poper*/} exp;
expr: MAY | MEN | MAYIG | MENIG | IGUAL | DIF;

exp: termino {/*Generar cuadruplo*/} exp1;
exp1: /* empty */ | MAS {/*Meter operador a Poper*/} exp | MENOS {/*Meter operador a Poper*/} exp;

termino: factor {/*Generar cuadruplo*/} te;
te: /* empty */ | POR {/*Meter operador a Poper*/} termino | ENTRE {/*Meter operador a Poper*/} termino;

factor: varcte {/*Asignar Direccion de memoria a ID*/ /*Meter ID(Direccion) a PilaO*/} | predef | PAO {/*Meter fondo falso*/} expresion PAC {/*Sacar fondo falso*/};

varcte: ID varcte1 | 
			CINT   { if(nameVar != NULL){ addTypeVar( nameVar, 1); nameVar = NULL;}} | // 1 int
			CFLOAT { if(nameVar != NULL){ addTypeVar( nameVar, 2); nameVar = NULL;}} | // 2 float
			STRING { if(nameVar != NULL){ addTypeVar( nameVar, 3); nameVar = NULL;}} | // 3 string
			TRUE   { if(nameVar != NULL){ addTypeVar( nameVar, 4); nameVar = NULL;}} | // 4 bool
			FALSE  { if(nameVar != NULL){ addTypeVar( nameVar, 4); nameVar = NULL;}};  // 0 noType	
varcte1: /* empty */ |  COO exp COC;

condicion: SI PAO logico PAC LLO co1 LLC co3;
co1: cuerpo co2;
co2: /* empty */ | cuerpo co2;
co3: /* empty */ | SINO LLO co1 LLC;

ciclo: MIENTRAS PAO logico PAC LLO ci1 LLC;
ci1: cuerpo ci2;
ci2: /* empty */ | cuerpo ci2;

predef: pdfunc PAO pred1 PAC;
pred1: exp pred2;
pred2: /* empty */ | C exp pred2;

imprimir: IMPRIMIR PAO imp1 PAC;
imp1: varcte imp2;
imp2: /* empty */ | MAS varcte imp2;

pdfunc:DETENER | MOVER_ADELANTE | ROTAR | RECOGER_OBJ | CARGAR_MAPA | TERMINAR | ID;

pruebas: CAMINO_DESPEJADO | CAMINO_BLOQUEADO | INTERSECCION_OBJ | TENER_TODOS_OBJS;

%%
main() {
	if (yyparse()==0)
		printf("PROGRAMA ACEPTADO\n");
	else
		printf("ERROR\n");
	
}

void yyerror(const char *s) {
	cout << "Parse error!  Message: " << s << endl;
	// might as well halt now:
	exit(-1);
}
